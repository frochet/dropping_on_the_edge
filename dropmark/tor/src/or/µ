#include "orconfig.h"
#define TOR_SIGNALATTACK_PRIVATE
#include <time.h>
#include "or.h"
#include "config.h"
#include "relay.h"
#include "signal_attack.h"
#include "circuitlist.h"
#include "test.h"
#include <stdio.h>


#define ONE_OVER_10SIX 1E-6


static int mock_nbr_called = 0;

static int
mock_relay_send_command_from_edge(streamid_t stream_id, circuit_t *circ,
    uint8_t relay_command, const char *payload, size_t payload_len,
    crypt_path_t *cpath_layer, const char *filename, int lineno) {
  mock_nbr_called++;
  (void) stream_id;
  (void) circ;
  (void) relay_command;
  (void) payload;
  (void) payload_len;
  (void) cpath_layer;
  (void) filename;
  (void) lineno;
  return 0;
}

static int
mock_relay_send_command_from_edge_decode(streamid_t stream_id, circuit_t *circ,
    uint8_t relay_command, const char *payload, size_t payload_len,
    crypt_path_t *cpath_layer, const char *filename, int lineno) {
  mock_nbr_called++;
  (void) stream_id;
  (void) relay_command;
  (void) payload;
  (void) payload_len;
  (void) cpath_layer;
  (void) filename;
  (void) lineno;
  return signal_listen_and_decode(circ);
}

static circuit_t *
fake_origin_circuit_new(circid_t circ_id) {
  origin_circuit_t *circ = origin_circuit_new();
  circ->cpath = tor_malloc_zero(sizeof(crypt_path_t));
  circ->base_.n_circ_id = circ_id;
  return circ;
}

/*
 * This function test the time elapsed by the encoding of a message using the function 
 * signal_minimize_blank_latency
 */

static void
test_elapsed_signal_encoding() {
  struct timespec time_now, time_then;
  double elapsed_ms;
  char *addresses[] = {
    "172.124.243.122",
    "122.1.23.255",
    "32.32.32.32",
    "129.0.23.23",
  };
  int should_call[4] = {
    173+125+244+123,
    123+2+24+256,
    33+33+33+33,
    130+1+24+24,
  };
  origin_circuit_t *fake_circ = fake_origin_circuit_new(42);
  /* Replace subcall of signal_minimize_blank_latency by a dummy function */
  MOCK(relay_send_command_from_edge_, mock_relay_send_command_from_edge);
  for (int i = 0; i < 4; i++) {
    char *address = tor_malloc(strlen(addresses[i]+1));
    strcpy(address, addresses[i]);
  //call signal encoding function
    clock_gettime(CLOCK_REALTIME, &time_now);
    int r = signal_minimize_blank_latency(address, TO_CIRCUIT(fake_circ));
    tt_int_op(mock_nbr_called, ==, should_call[i]);
    mock_nbr_called = 0;
    tt_int_op(r, ==, 0);
    clock_gettime(CLOCK_REALTIME, &time_then);
    elapsed_ms = (time_then.tv_sec-time_now.tv_sec)*1000.0 +\
                 (time_then.tv_nsec-time_now.tv_nsec)*ONE_OVER_10SIX;
  //set time_then
  //assert that elapsed time is > 3*default time used
    tt_int_op(elapsed_ms, >=, 3*(get_options_mutable()->SignalBlankIntervalMS));
    fake_circ->base_.n_circ_id++;
    free(address);
  }
 
 done:
  UNMOCK(relay_send_command_from_edge_);
  tor_free(fake_circ->cpath);
  tor_free(fake_circ);
}


static void
test_circ_timing_list() {
  circuit_t *fake_circ1 = tor_malloc_zeros

}

static void
test_signal_decoding() {
  circuit_t *fake_circ = origin_circuit_new();
  fake_circ->n_circ_id = 0;
  fake_circ->cpath = tor_malloc_zero(sizeof(crypt_path_t));
  int r;
  char *addresses[] = {
    "182.232.10.82",
    "0.122.232.12",
    "12.23.12.124",
  };
  int should_call[3] = {
    183+233+11+83,
    1+123+233+13,
    13+24+13+125,
  };
  MOCK(relay_send_command_from_edge_, mock_relay_send_command_from_edge_decode);
  for (int i = 0; i < 3; i++) {
    r = signal_minimize_blank_latency(addresses[i], fake_circ);
    tt_int_op(mock_nbr_called, == should_call[i]);
    mock_nbr_called = 0;
    tt_int_op(r, ==, 1); //successfully decode the address
    fake_circ->n_circ_id++;
  }
 done:
  UNMOCK(relay_send_command_from_edge_);
  tor_free(fake_circ);
}

struct testcase_t signal_attack_tests[] = {
  { "elapsed_signal_encoding", test_elapsed_signal_encoding, 0, NULL, NULL},
  /*{ "signal_decoding", test_signal_decoding, 0, NULL, NULL},*/
  END_OF_TESTCASES
};


